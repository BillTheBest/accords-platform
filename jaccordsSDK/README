----------------------------------------------------------------------------- 
ACCORDS Platform                                                              
Copyright 2012  Hamid MEDJAHED (hmedjahed@prologue.fr) Prologue               
----------------------------------------------------------------------------- 
Licensed under the Apache License, Version 2.0 (the "License");               
you may not use this file except in compliance with the License.              
You may obtain a copy of the License at                                       
                                                                               
       http://www.apache.org/licenses/LICENSE-2.0                              
                                                                               
Unless required by applicable law or agreed to in writing, software           
distributed under the License is distributed on an "AS IS" BASIS,             
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.      
See the License for the specific language governing permissions and           
limitations under the License.                                                
------------------------------------------------------------------------------

HOW to use jaccordsSDK

# Make sure to have defined the environment variable JAVA_HOME pointing to JDK 1.6 .
# Now in jaccordsSDK/jcompmgr generate libcompmgr.so following the instructions 
# given by the execution of

   $ cd jaccordsSDK/jcompmgr
   $ make

# Then create somewhere a class (for example Testjcompmgr.java) implementing 
# the functionality needed. Use the examples below as reference.
# Compile the java class (using javac).

   $ export  LD_LIBRARY_PATH=/path/to/jaccordsSDK/jcompmgr/
   $ export      CLASSPATH=.:/path/to/jaccordsSDK/jcompmgr/
   $ javac Testjcompmgr.java
   $ java  Testjcompmgr


Class examples

# A class that generates a category is shown in this example
	- where generateCategory(String catName, String catAtr, String catAct, String occiFlag) takes five parameters	
	- catName: Category name
	- catAtr: Attributes of the category (exp: "atr1 atr2 atr2")
        - catAct: Actions of the category (exp: "act1 act2 act3")
	- occiFlag : Takes one of the foolowing value
                - "" nothing to specify
		- "_OCCI_PRIORITY"  the service is to be offered first   
		- "_OCCI_PRIVATE"   the service is not to be published   
		- "_OCCI_SECRET"    the will not appear in categories   
		- " _OCCI_AUTO_PUBLISH"    the service will be auto publish
		- "_OCCI_SECURE"  each access must be secure         
		- "_OCCI_NO_PRICING"    inhibit category pricing            
		- "_OCCI_NO_AUTHORIZE"  inhibit category authorize failure   	
		- "_OCCI_CONSUMER"  publish monitoring consumer         
		- "_OCCI_PROVIDER"  publish resources provider           
		- "_OCCI_CONTRACT"  publish resources under contract 
    
		public class Testjcompmgr{
        		static{
                                try
                                {
                        		System.loadLibrary("JcompMgr");
                		}catch( UnsatisfiedLinkError e){
                        		System.out.println("Could not load library, add it to LD_LIBRARY_PATH?");
                        		System.exit(1);
                		}
        		}
        		public static void main(String[] argv){
                		JcompMgr gen = new JcompMgr();
                 		gen.generateCategory("mycategory","atr1 atr2","start stop",""); 
			}
		}


# To remove a category use this class example
	- where removeCategory(String catName, int indice) takes two parameters
	- catName: Category name
        - indice: 1 ->  the category contains actions
                  0 ->  no actions for this category			
		public class Testjcompmgr{
        		static{
                		try{
                        		System.loadLibrary("JcompMgr");
                		}catch( UnsatisfiedLinkError e){
                        		System.out.println("Could not load library, add it to LD_LIBRARY_PATH?");
                        		System.exit(1);
                		}
        		}
        		public static void main(String[] argv){
                		JcompMgr gen = new JcompMgr();
                 		gen.removeCategory("mycategory", 1);
			}
		}


 # To generate a new module use this class example
	- where generateComponent(String mName, String catName) takes two parameters
	- mName: module name
	- catName: List of category (exp "cat1 cat2 cat3")
        	public class Testjcompmgr{
        		static{
                		try{
                        		System.loadLibrary("JcompMgr");
                		}catch( UnsatisfiedLinkError e){
                        		System.out.println("Could not load library, add it to LD_LIBRARY_PATH?");
                        		System.exit(1);
                		}
        		}
        		public static void main(String[] argv){
                		JcompMgr gen = new JcompMgr();
                 		 gen.generateComponent("mymodule","mycategory");
			}
		}

# To delete a module use this class example
	- where removeComponent(String mName) takes one parameter
	- mName: moduleName

		public class Testjcompmgr{
        		static{
                		try{
                        		System.loadLibrary("JcompMgr");
                		}catch( UnsatisfiedLinkError e){
                        		System.out.println("Could not load library, add it to LD_LIBRARY_PATH?");
                        		System.exit(1);
                		}
        		}
        		public static void main(String[] argv){
                		JcompMgr gen = new JcompMgr();
                 		 gen.removeComponent("mymodule");
			}
		}

# After creating or removing a category compile all the accords-platform 
	$ cd accords-platform
	$ make 
	$ make install

# After creating a category you find two files under accords-platform/jaccords/
	- <categoryName>Interface.java: for implementing crud (create, retrieve, update, delete) interface for the new category.
	- <categoryNameAction.java: for implementing actions for the new category.

# Next when the new module has been created
	- A new folder named <moduleName> is created under accords-platform.
	- Inside this folder <JmoduleName>.java file is created. 

# Add the new module configurations to accords.xml and cords_user.xml files.

# Compile Jcompdev library
 	$ cd accords-platform/jaccordsSDK/jcompdev
	$ make

# Compile the generated module
 	-Compile the java class (using javac).
   	$ export  LD_LIBRARY_PATH=/path/to/jaccordsSDK/jcompdev/
   	$ export      CLASSPATH=.:/path/to/jaccordsSDK/jcompdev/
   	$ javac J<moduleName<.java

# Make sure that the platform has been already started

# If the secure mode is selected you need to create key and certificate for this new module by using this script under accords-platform/scripts/  folder
  
   		module=<JmoduleName>
		export bits=2048
		export days=365
		export sslconfig=./openssl.cnf
       		echo "<tls key='security/"${module}"PrivateKey.pem'" > security/${module}Tls.xml
    		echo "     certificate='security/"${module}"Certificate.pem'" >> security/${module}Tls.xml
    		echo "     passphrase='"Accords"'" >> security/${module}Tls.xml
    		echo "     authority='"Certificates.crt"'" >> security/${module}Tls.xml
    		echo "     authenticate='"1"'" >> security/${module}Tls.xml
    		echo "     option='"13"' />" >> security/${module}Tls.xml
    		chmod 0640 security/${module}Tls.xml
    		echo "Creating certificate for module $1"
    		if test ! -e $sslconfig; then
			echo "Can not find openSSL config file: $sslconfig"
			exit 1
    		fi
    		if [ -z "$nethsm" ]; then
			openssl req -config $sslconfig \
	    			-newkey $bits -x509 -days $days -sha1 \
	    			-keyout security/${module}PrivateKey.pem -out security/${module}Certificate.pem 2> /dev/null
    		else
			openssl req -engine pkcs11 -keyform e -config $sslconfig \
	    			-newkey $bits -x509 -days $days -sha1 \
	    			-keyout security/${module}PrivateKey.pem -out security/${module}Certificate.pem
    		fi
    		chmod 0400 security/${module}PrivateKey.pem
    		chmod 0444 security/${module}Certificate.pem

# To execute the new module file run-<moduleName>.sh 
  	$ cd accords-platform/scrips
	$ touch run-<moduleName>.sh
        $ chmod +x run-<moduleName>.sh

# Copy the folowing script in run-<moduleName>.sh file

	CURRDIR=`dirname $0`       
	export LD_LIBRARY_PATH=$CURRDIR/../jaccordsSDK/jcompdev/;pwd :/usr/local/lib/
	export CLASSPATH=$CURRDIR/../<moduleName>/:$CURRDIR/../jaccordsSDK/:$CURRDIR/../jaccordsSDK/jcompdev/:$CURRDIR/../jaccords/:$CURRDIR/../jaccords/jsrc/
	java -Djava.library.path="$LD_LIBRARY_PATH" -cp $CLASSPATH J<moduleName> J<moduleName> --config accords.xml  CO-EXPMODULE/1.0


# run the module
	$ ./run-<moduleName>.sh

