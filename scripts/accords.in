#!/bin/sh
#
# Wrapper for accords commands
#
# Copyright: 
#   Prologue 2011
#   Mandriva 2011
#
# Author: 
#   Jean Parpaillon
#   Jamie Marshall
#

set -e

export PATH=@sitepath@:$PATH

confdir=@pkgsysconfdir@
if test -e ./accords.ini; then
    . ./accords.ini
elif test -e $confdir/accords.ini; then
    . $confdir/accords.ini
fi

trace=1
threads=1
verbose=0
debug=0
domain=occi
operator=accords
password=co-system

if [ -z "$target" ]; then
    target=accords.xml
fi

if [ -z "$resthost" ]; then
    resthost=127.0.0.1
fi

if [ -z "$restport" ]; then
    restport=8086
fi

if [ -z "$publisher" ]; then
    publisher=http://$resthost:$restport
fi

if [ -z "$monitor" ]; then
    monitor=$trace
fi

###
### Aliases
###
### The script must be called through one of the following aliases.
###
aliases="co-start co-broker co-command co-parser co-resolver co-status co-stop run-azprocci run-broker run-coes run-comons run-conets run-coobas run-coss run-ezvm run-fileserver run-onprocci run-osprocci run-parser run-procci run-publisher accords-config"

_co_start() {
    echo "Starting ACCORDS"

    echo "Starting accords publication services"
    run-publisher &
    sleep 1

    echo "Starting accords file services"
    run-fileserver & 
    sleep 1
    
    echo "Starting accords security services"
    run-coss &
    sleep 1

    echo "Starting accords monitoring services"
    run-comons &
    sleep 1
    
    echo "Starting accords accounting services"
    run-coobas &
    sleep 1
    
    echo "Starting accords networking services"
    run-conets &
    sleep 1

    echo "Starting accords elasticity services"
    run-coes &
    sleep 1
    
    echo "Starting accords image services"
    run-ezvm &
    sleep 1

    echo "Starting accords parser services"
    run-parser &
    sleep 1

    echo "Starting accords broker services"
    run-broker &
    sleep 1

    echo "Starting accords procci services"
    run-procci &
    sleep 1

    echo "Starting accords open stack services"
    run-osprocci &
    sleep 1

    echo "Starting accords open nebula services"
    run-onprocci &
    sleep 1
    
    echo "Starting accords windows azure services"
    run-azprocci &
    sleep 1

    echo "ACCORDS ready"
    co-status
}

_co_broker() {
    if [ -z "$tls" ]; then
	testcb --publisher "$publisher" --verbose plan_$1.xml
    else
	testcb --tls security/testcbTls.xml --publisher "$publisher" --verbose plan_$1.xml
    fi
} 

_co_command() {
    if [ -z "$tls" ]; then
	/usr/local/bin/command --publisher "$publisher" $*
    else
	/usr/local/bin/command --tls $secdir/commandTls.xml --publisher "$publisher" $*
    fi
}

_co_parser() {
    if [ -z "$tls" ]; then
	testcp --publisher "$publisher" --verbose $1.xml
    else
	testcp --tls $secdir/testcpTls.xml --publisher "$publisher" --verbose $1.xml
    fi
}

_co_resolver() {
    if [ -z "$tls" ]; then
	testresolver --publisher "$publisher" $*
    else
	testresolver --tls security/testresolverTls.xml --publisher "$publisher" $*
    fi
}

_co_status() {
    echo "-----------------------------"
    echo " Accords Platform Components "
    echo "-----------------------------"
    netstat -a -p | grep LISTEN | grep publisher
    netstat -a -p | grep LISTEN | grep fileserver
    netstat -a -p | grep LISTEN | grep coss
    netstat -a -p | grep LISTEN | grep comons
    netstat -a -p | grep LISTEN | grep conets
    netstat -a -p | grep LISTEN | grep coobas
    netstat -a -p | grep LISTEN | grep coes
    netstat -a -p | grep LISTEN | grep parser
    netstat -a -p | grep LISTEN | grep broker
    netstat -a -p | grep LISTEN | grep procci
    netstat -a -p | grep LISTEN | grep ezvm
}

_co_stop() {
    _stop_service onprocci
    _stop_service osprocci
    _stop_service azprocci
    _stop_service procci
    _stop_service broker
    _stop_service parser
    _stop_service ezvm
    _stop_service coes
    _stop_service conets
    _stop_service coobas
    _stop_service comons
    _stop_service coss
    _stop_service fileserver
    _stop_service publisher
}

_run_azprocci() {
    azprocci --config $target CO-AZPROCCI/1.0
} 

_run_broker() {
    broker --config $target CO-BROKER/1.0
} 

_run_coes() {
    coes --config $target CO-ES/1.0
} 

_run_comons() {
    comons --config $target CO-MONS/1.0
}

_run_conets() {
    conets --config $target CO-NETS/1.0
}

_run_coobas() {
    coobas --config $target CO-BAS/1.0
}

_run_coss() {
    coss --config $target CO-SS/1.0
}

_run_ezvm() {
    ezvm --config $target CO-SS/1.0
}

_run_fileserver() {
    fileserver --config $target CO-FS/1.0
}

_run_onprocci() {
    onprocci --config $target CO-ONPROCCI/1.0
}

_run_osprocci() {
    osprocci --config $target CO-OSPROCCI/1.0
}

_run_parser() {
    parser --config $target CO-PARSER/1.0
}

_run_procci() {
    procci --config $target CO-PROCCI/1.0
}
 
_run_publisher() {
    publisher --config $target CO-PUB/1.0
}

_run_fileserver() {
    fileserver --config $target CO-FS/1.0
}

_accords_config() {
    if test `id -u` -eq 0; then
	export secdir=$confdir/security
    else
	export secdir=$HOME/.accords/security
    fi

    if [ -z "$tls" ]; then
	echo "Accords Security Not Required"
    else
	echo "Creating Accords Security Files"
    
	export calist=Certificates.crt
	export pass=Accords
	export options=13
    
	if test -d $secdir; then
	    echo "ACCORDS security dir exists ($secdir): please remove it first !"
	    exit 1
	else
	    mkdir -p $secdir
	fi

	_mksecs publisher 0
	_mksecs fileserver 0
	_mksecs coss 0
	_mksecs comons 1
	_mksecs coes 1
	_mksecs coobas 1
	_mksecs conets 1
	_mksecs broker 1
	_mksecs ezvm 1
	_mksecs parser 1
	_mksecs procci 1
	_mksecs osprocci 1
	_mksecs onprocci 1
	_mksecs azprocci 1
    
	_mksect testcp 1
	_mksect testcb 1
	_mksect teston 1
	_mksect testos 1
	_mksect testresolver 1
	_mksect command 1

	echo "Creating Accords Certificats"
	
	export bits=2048
	export days=365
	export sslconfig=./openssl.cnf

	_mkcert coss
	_mkcert coes
	_mkcert coobas
	_mkcert comons
	_mkcert conets
	_mkcert broker
	_mkcert parser
	_mkcert ezvm
	_mkcert publisher
	_mkcert fileserver
	_mkcert procci
	_mkcert osprocci
	_mkcert onprocci
	_mkcert azprocci
	
	_mkcert testcp
	_mkcert testcb
	_mkcert testos
	_mkcert teston
	_mkcert testresolver
	_mkcert command
    fi

    echo "Creating Accords Global Configuration File: $target"
    echo "<accords>" > $target

    _mkpub 
    _mkmon coss 
    _mkmon comons 
    _mkcfg coes 
    _mkcfg conets 
    _mkcfg coobas 
    _mkcfg parser 
    _mkcfg broker 
    _mkcfg procci 
    _mkcfg osprocci  
    _mkcfg onprocci
    _mkcfg azprocci
    _mkcfg fileserver
    _mkcfg ezvm

    echo "</accords>" >> $target
}

###
### Helper functions
###
_usage() {
    echo "Usage: this script must be called through one of the following name:"
    for alias in $aliases; do
	echo " * $alias"
    done
}

_stop_service() {
    service=$1
    echo "Stopping service: $service"
    killall -q $service || true
    killall -q lt-$service || true
    sleep 1
}

_mksecs() {
    module=$1
    auth=$2
    echo "<tls key='$secdir/"${module}"PrivateKey.pem'" > $secdir/${module}Tls.xml
    echo "     certificate='$secdir/"${module}"Certificate.pem'" >> $secdir/${module}Tls.xml
    echo "     passphrase='"$pass"'" >> $secdir/${module}Tls.xml
    echo "     authority='"$calist"'" >> $secdir/${module}Tls.xml
    echo "     authenticate='"$auth"'" >> $secdir/${module}Tls.xml
    echo "     option='"$options"' />" >> $secdir/${module}Tls.xml
    chmod 0640 $secdir/${module}Tls.xml
}

_mksect() {
    module=$1
    auth=$2
    echo "<tls key='$secdir/"${module}"PrivateKey.pem'" > $secdir/${module}Tls.xml
    echo "     certificate='$secdir/"${module}"Certificate.pem'" >> $secdir/${module}Tls.xml
    echo "     passphrase='"$pass"'" >> $secdir/${module}Tls.xml
    echo "     authority='"$calist"'" >> $secdir/${module}Tls.xml
    echo "     authenticate='"$auth"'" >> $secdir/${module}Tls.xml
    echo "     option='"$optiont"' />" >> $secdir/${module}Tls.xml
    chmod 0640 $secdir/${module}Tls.xml
}

_mkcert() {
    module=$1
    if test ! -e $sslconfig; then
	echo "Can not find openSSL config file: $sslconfig"
	exit 1
    fi
    openssl req -config $sslconfig \
	-newkey $bits -x509 -days $days -sha1 \
	-keyout ${secdir}/${module}PrivateKey.pem -out ${secdir}/${module}Certificate.pem 2> /dev/null
    chmod 0400 ${secdir}/${module}PrivateKey.pem
    chmod 0444 ${secdir}/${module}Certificate.pem
}

_mktls() {
    module=$1
    if test -z "$tls"; then
	echo "         tls=''/>" >> $target
    else
	echo "         tls='"$tls"/"${module}"Tls.xml'/>" >> $target
    fi
}

_mkpub() {
    echo "<publisher>" >> $target
    echo "<rest host='"$resthost"' port='"$restport"'/>" >> $target
    echo "<security admin='admin' pass='admin' authorise='0' monitor='"$trace"' " >> $target
    _mktls publisher
    echo "<memory file='publications.xml' autosave='1'/>" >> $target
    echo "<domain name='"$domain"'/>" >> $target
    echo "</publisher>" >> $target
}

_mkmon() {
    module=$1
    export restport=$(($restport+1))
    echo "<"${module} >> $target
    echo "    publisher='"$publisher"'"           >> $target
    echo "    operator='"$operator"'"           >> $target
    echo "    identity='"$resthost":"$restport"'" >> $target
    echo "    verbose='"$verbose"'"   >> $target
    echo "    debug='"$debug"'"       >> $target
    echo "    threads='"$threads"'>"  >> $target
    echo "    <rest host='"$resthost"' port='"$restport"'/>" >> $target
    echo "    <security" >> $target
    echo "         user='service-"${module}"'" >> $target
    echo "         password='"$password"'" >> $target
    echo "         monitor='"$trace"'" >> $target
    _mktls ${module}
    echo "    <domain name='"$domain"'/>" >> $target
    echo "</"${module}">" >> $target
}

_mkcfg() {
    module=$1
    export restport=$(($restport+1))
    echo "<"${module} >> $target
    echo "    publisher='"$publisher"'"           >> $target
    echo "    operator='"$operator"'"           >> $target
    echo "    identity='"$resthost":"$restport"'" >> $target
    echo "    verbose='"$verbose"'"   >> $target
    echo "    debug='"$debug"'"       >> $target
    echo "    threads='"$threads"'>"  >> $target
    echo "    <rest host='"$resthost"' port='"$restport"'/>" >> $target
    echo "    <security" >> $target
    echo "         user='service-"${module}"'" >> $target
    echo "         password='"$password"'" >> $target
    echo "         monitor='"$monitor"'" >> $target
    _mktls ${module}
    echo "    <domain name='"$domain"'/>" >> $target
    echo "</"${module}">" >> $target
}

if test "`basename $0`" != "accords-config"; then
    if test ! -e $target; then
	echo "Can not find target file: $target."
	echo "Please run accords-config first !"
	exit 1
    fi
fi

case `basename $0` in
    co-start) 
	_co_start $*
	;;
    co-broker) 
	_co_broker $*
	;;
    co-command) 
	_co_command $*
	;;
    co-parser) 
	_co_parser $*
	;;
    co-resolver)
	_co_resolver $*
	;;
    co-status)
	_co_status $*
	;;
    co-stop)
	_co_stop $*
	;;
    run-azprocci) 
	_run_azprocci $*
	;;
    run-broker)
	_run_broker $*
	;;
    run-coes)
	_run_coes $*
	;;
    run-comons)
	_run_comons $*
	;;
    run-conets)
	_run_conets $*
	;;
    run-coobas)
	_run_coobas $*
	;;
    run-coss)
	_run_coss $*
	;;
    run-ezvm)
	_run_ezvm $*
	;;
    run-fileserver)
	_run_fileserver $*
	;;
    run-onprocci)
	_run_onprocci $*
	;;
    run-osprocci)
	_run_osprocci $*
	;;
    run-parser)
	_run_parser $*
	;;
    run-procci)
	_run_procci $*
	;;
    run-publisher)
	_run_publisher $*
	;;
    accords-config)
	_accords_config $*
	;;
    *)
	_usage
	exit 1
	;;
esac

exit 0
