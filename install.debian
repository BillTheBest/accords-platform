#!/bin/sh
# ------------------------------------------------------------
# CompatibleOne Accords 
# ------------------------------------------------------------
# Installation and Operational Configuration Script
# ------------------------------------------------------------
# This script generates all scripts and configuration files
# required by a customised operational instance of the accords
# provisioning system. 
# The script expects the following parameters controlling its
# operation:
#        1) The first  parameter is the filename that will 
#           be generated containing the global configuration.
#        2) The Base Rest Host Url
#           Will be used as the REST Host value and also to
#           build the publication identity
#        3) The Base Rest Service Port 
#           Will be used as the REST Port and will increment
#           by one for each subsequent service. The root value
#           will be used as the local publisher service port.
#        4) The publisher URL that will be used for allof the
#           individual service configuration files
# ------------------------------------------------------------
echo "-------------------------------------------"
echo "CompatibleOn Accords Configuration Tool"
echo "Verification of Command Line Parameters"

export target=$1
export resthost=$4
export restport=$5
export publisher=$3

if [ -z "$target" ]
then
	export target=accords.xml
fi

if [ -z "$resthost" ]
then
	export resthost=http://127.0.0.1
fi

if [ -z "$restport" ]
then
	export restport=8086
fi

if [ -z "$publisher" ]
then
	export publisher=$resthost:$restport
fi

echo "Configuration Parameters Established       "
echo "-------------------------------------------"
echo "Target Configuration : " $target
echo "Rest Host Base URL   : " $resthost
echo "Rest Host Base Port  : " $restport
echo "Accords Publisher    : " $publisher
echo "-------------------------------------------"
echo "Installing Libraries"

sudo cp lib/*.so /usr/lib
sudo mkdir service
sudo mkdir rest
sudo chmod 0660 service rest

echo "Creating Start Script : co-start"
echo "# -------------------------------------" >  co-start
echo "# Compatible one accords launcher      " >> co-start
echo "# Generated by the configurator        " >> co-start
echo "# -------------------------------------" >> co-start
echo "echo starting ACCORDS" >> co-start

echo "echo starting accords publication services" >> co-start
echo "bin/publisher --config " $target " CO-PUB/1.0"  > ./run-publisher
chmod ug+x ./run-publisher
echo "./run-publisher& sleep 1;" >> co-start

echo "echo starting accords file services" >> co-start
echo "bin/fileserver --config " $target " CO-FS/1.0"  > ./run-fileserver
chmod ug+x ./run-fileserver
echo "./run-fileserver& sleep 1;" >> co-start

echo "echo starting accords security services" >> co-start
echo "bin/coss --config " $target " CO-SS/1.0"        > ./run-coss
chmod ug+x ./run-coss

echo "./run-coss& sleep 1;" >> co-start

echo "echo starting accords monitoring services" >> co-start
echo "bin/comons --config " $target " CO-MONS/1.0"    > ./run-comons
chmod ug+x ./run-comons
echo "./run-comons& sleep 1;" >> co-start

echo "echo starting accords networking services" >> co-start
echo "bin/conets --config " $target " CO-NETS/1.0"    > ./run-conets
chmod ug+x ./run-conets
echo "./run-conets& sleep 1;" >> co-start

echo "echo starting accords accounting services" >> co-start
echo "bin/coobas --config " $target " CO-BAS/1.0"     > ./run-coobas
chmod ug+x ./run-coobas

echo "./run-coobas& sleep 1;" >> co-start
echo "echo starting accords elasticity services" >> co-start
echo "bin/coes --config " $target " CO-ES/1.0"        > ./run-coes
chmod ug+x ./run-coes

echo "./run-coes& sleep 1;" >> co-start
echo "echo starting accords parser services" >> co-start
echo "bin/parser --config " $target " CO-PARSER/1.0"  > ./run-parser
chmod ug+x ./run-parser

echo "./run-parser& sleep 1;" >> co-start
echo "echo starting accords broker services" >> co-start
echo "bin/broker --config " $target " CO-BROKER/1.0"  > ./run-broker
chmod ug+x ./run-broker

echo "./run-broker& sleep 1;" >> co-start
echo "echo starting accords procci services" >> co-start
echo "bin/procci --config " $target " CO-PROCCI/1.0"  > ./run-procci
chmod ug+x ./run-procci

echo "./run-procci& sleep 1;" >> co-start
echo "echo starting accords open stack services" >> co-start
echo "bin/osprocci --config " $target " CO-OSPROCCI/1.0"  > ./run-osprocci
chmod ug+x ./run-osprocci

echo "./run-osprocci& sleep 1;" >> co-start
echo "echo starting accords open nebula services" >> co-start
echo "bin/onprocci --config " $target " CO-ONPROCCI/1.0"  > ./run-onprocci
chmod ug+x ./run-onprocci

echo "./run-onprocci& sleep 1;" >> co-start
echo "echo starting accords windows azure services" >> co-start
echo "bin/azprocci --config " $target " CO-AZPROCCI/1.0"  > ./run-azprocci
chmod ug+x ./run-azprocci
echo "./run-azprocci& sleep 1;" >> co-start
chmod ug+x co-start

echo "echo ACCORDS ready" >> co-start
echo "./co-status" >> co-start

echo "# -------------------------------------" >> co-start
echo "# end of compatibleone accords launcher" >> co-start
echo "# -------------------------------------" >> co-start

echo "Creating Stop Script  : co-stop"
echo "killall onprocci" > co-stop
echo "sleep 1" >> co-stop
echo "killall osprocci" >> co-stop
echo "sleep 1" >> co-stop
echo "killall azprocci" >> co-stop
echo "sleep 1" >> co-stop
echo "killall procci" >> co-stop
echo "sleep 1" >> co-stop
echo "killall broker" >> co-stop
echo "sleep 1" >> co-stop
echo "killall parser" >> co-stop
echo "sleep 1" >> co-stop
echo "killall coes" >> co-stop
echo "sleep 1" >> co-stop
echo "killall coobas" >> co-stop
echo "sleep 1" >> co-stop
echo "killall comons" >> co-stop
echo "sleep 1" >> co-stop
echo "killall conets" >> co-stop
echo "sleep 1" >> co-stop
echo "killall coss" >> co-stop
echo "sleep 1" >> co-stop
echo "killall fileserver" >> co-stop
echo "sleep 1" >> co-stop
echo "killall publisher" >> co-stop
chmod ug+x co-stop

# -------------
# Status Script
# -------------
echo "Creating Status Script : co-status"
echo "echo ---------------------------" > co-status
echo "echo Accords Platform Components" >> co-status
echo "echo ---------------------------" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep publisher" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep fileserver" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep coss" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep comons" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep conets" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep coobas" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep coes" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep parser" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep broker" >> co-status
echo "sudo netstat -a -p | grep LISTEN | grep procci" >> co-status
chmod ug+x co-status

echo "Creating Accords Users : cords_user.xml"
echo "<cords_users>" > cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='3d960eb3-cone-4bdd-a7a7-20e9coms85f7' name='service-conets' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='3d960eb3-como-4bdd-a7a7-20e9coms85f7' name='service-comons' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='3d960eb3-coss-4bdd-a6a7-20e9fe0b85f7' name='service-coss' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='3d960eb3-coes-4bdd-a6a7-20e9fe0b85f7' name='service-coes' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='fa77ed3c-coob-407c-9cd2-40cee4749af2' name='service-coobas' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='eba7ff7b-cofs-4bd6-bb06-c7e0a942e3bf' name='service-fileserver' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='84962213-copa-41ea-b5c9-0954ba44e426' name='service-parser' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='9ec3de8f-cobr-4ffa-bbd4-bb4b610ed15d' name='service-broker' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='b41a1345-copr-4fcc-b504-9db81d51b03f' name='service-procci' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='e8b46183-ospr-4b30-a7d0-6a6711d43462' name='service-osprocci' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='e91cdde9-onpr-490c-941b-e74c1891c71b' name='service-onprocci' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='b949011b-azpr-400c-b6a7-c3f8a17f0ee6' name='service-azprocci' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='b949011b-pars-400c-b6a7-c3f8a17f0ee6' name='test-parser' password='co-system' />" >> cords_user.xml
echo "<cords_user " >> cords_user.xml
echo " id='b949011b-brok-400c-b6a7-c3f8a17f0ee6' name='test-broker' password='co-system' />" >> cords_user.xml
echo "</cords_users>" >> cords_user.xml

# ----------------------------------------
# Creation of Accords Security Files
# ----------------------------------------
export tls=security

if [ -z "$tls" ]
then
echo "Accords Security Not Required"

else
echo "Creating Accords Security Files"
function mksec
{
	echo "<tls key='security/"$1"PrivateKey.pem'" > security/$1Tls.xml
	echo "     certificate='security/"$1"Certificate.pem'" >> security/$1Tls.xml
	echo "     passphrase='"$pass"'" >> security/$1Tls.xml
	echo "     authenticate='"$auth"'" >> security/$1Tls.xml
	echo "     option='"$options"' />" >> security/$1Tls.xml
	chmod 0640 security/$1Tls.xml
}

export pass=Accords
export auth=0
export options=5

if [ -d security ]
then
	rm -r security -f
fi

mkdir security

mksec publisher
mksec fileserver
mksec coss
export auth=1
mksec comons
mksec coes
mksec coobas
mksec conets
mksec broker
mksec parser
mksec procci
mksec osprocci
mksec onprocci
mksec azprocci

mksec testcp
mksec testcb
mksec testresolver

# ----------------------------------------
# Creation of Accords TLS Certificates
# ----------------------------------------
echo "Creating Accords Certificats"

function mkcert
{
	openssl req -config $config \
		-newkey $bits -x509 -days $days -sha1 \
		-keyout security/$1PrivateKey.pem -out security/$1Certificate.pem 2> /dev/null
	chmod 0400 security/$1PrivateKey.pem
	chmod 0444 security/$1Certificate.pem
}

export bits=2048
export days=365
export config=openssl.cnf

mkcert coss
mkcert coes
mkcert coobas
mkcert comons
mkcert conets
mkcert broker
mkcert parser
mkcert publisher
mkcert fileserver
mkcert procci
mkcert osprocci
mkcert onprocci
mkcert azprocci

mkcert testcp
mkcert testcb
mkcert testresolver

fi

# ----------------------------------------
# Creation of Accords Global Configuration 
# ----------------------------------------

export threads=1
export verbose=1
export debug=0
export domain=occi
export password=co-system
export monitor=0

function	mktls
{
	if [ -z "$tls" ]
	then
		echo "         tls=''/>" >> $target
	else
		echo "         tls='"$tls"/"$1"Tls.xml'/>" >> $target
	fi
}

function	mkpub
{
	echo "<publisher>" >> $target
	echo "<rest host='"$resthost"' port='"$restport"'/>" >> $target
	echo "<security admin='admin' pass='admin' authorise='0' monitor='0' " >> $target
	mktls publisher
	echo "<memory file='publications.xml' autosave='1'/>" >> $target
	echo "<domain name='"$domain"'/>" >> $target
	echo "</publisher>" >> $target
}

function	mkcfg
{
	export restport=$(($restport+1))
	echo "<"$1 >> $target
	echo "    publisher='"$publisher"'"           >> $target
	echo "    identity='"$resthost":"$restport"'" >> $target
	echo "    verbose='"$verbose"'"   >> $target
	echo "    debug='"$debug"'"       >> $target
	echo "    threads='"$threads"'>"  >> $target
	echo "    <rest host='"$resthost"' port='"$restport"'/>" >> $target
	echo "    <security" >> $target
	echo "         user='service-"$1"'" >> $target
	echo "         password='"$password"'" >> $target
	echo "         monitor='"$monitor"'" >> $target
	mktls $1
	echo "    <domain name='"$domain"'/>" >> $target
	echo "</"$1">" >> $target
}

function	mkmon
{
	export restport=$(($restport+1))
	echo "<"$1 >> $target
	echo "    publisher='"$publisher"'"           >> $target
	echo "    identity='"$resthost":"$restport"'" >> $target
	echo "    verbose='"$verbose"'"   >> $target
	echo "    debug='"$debug"'"       >> $target
	echo "    threads='"$threads"'>"  >> $target
	echo "    <rest host='"$resthost"' port='"$restport"'/>" >> $target
	echo "    <security" >> $target
	echo "         user='service-"$1"'" >> $target
	echo "         password='"$password"'" >> $target
	echo "         monitor='0'" >> $target
	mktls $1
	echo "    <domain name='"$domain"'/>" >> $target
	echo "</"$1">" >> $target
}

echo "Creating Accords Global Configuration File"
echo "<accords>" > $target

mkpub 
mkmon coss 
mkmon comons 
mkcfg coes 
mkcfg conets 
mkcfg coobas 
mkcfg parser 
mkcfg broker 
mkcfg procci 
mkcfg osprocci  
mkcfg onprocci
mkcfg azprocci
mkcfg fileserver

echo "</accords>" >> $target

echo "Creating Accords Manifest Parser and Broker Scripts"
if [ -z "$tls" ]
then
	echo "bin/testcp --publisher "$publisher" --verbose \$1.xml " > co-parser
	echo "bin/testcb --publisher "$publisher" --verbose plan_\$1.xml " > co-broker
else
	echo "bin/testcp --tls security/testcpTls.xml --publisher "$publisher" --verbose \$1.xml " > co-parser
	echo "bin/testcb --tls security/testcbTls.xml --publisher "$publisher" --verbose plan_\$1.xml " > co-broker
fi
chmod ug+x co-parser co-broker

echo "CompatibleOne Accords Configuration Complete"
echo "--------------------------------------------"


